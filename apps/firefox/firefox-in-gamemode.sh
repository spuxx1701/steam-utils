#!/usr/bin/env bash
#
# Runs Firefox in a KWin session if started in game mode.
# For documentation, visit https://gitlab.com/finewolf-projects/steamos-helpers/-/tree/master/firefox-in-gamemode
#
# ARGBASH_SET_INDENT([  ])
# ARG_OPTIONAL_BOOLEAN([update],[u],[Automatically downloads the latest version of this script from the source repository.])
# ARG_HELP([Runs Firefox in a KWin session if started in game mode.])
# ARG_VERSION_AUTO([1.1],['Author: Andrew Moore (/u/FineWolf)'])
# DEFINE_SCRIPT_DIR([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='uhv'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_update="off"


print_help()
{
  printf '%s\n' "Runs Firefox in a KWin session if started in game mode."
  printf 'Usage: %s [-u|--(no-)update] [-h|--help] [-v|--version]\n' "$0"
  printf '\t%s\n' "-u, --update, --no-update: Automatically downloads the latest version of this script from the source repository. (off by default)"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\t%s\n' "-v, --version: Prints version"
}


parse_commandline()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -u|--no-update|--update)
        _arg_update="on"
        test "${1:0:5}" = "--no-" && _arg_update="off"
        ;;
      -u*)
        _arg_update="on"
        _next="${_key##-u}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          { begins_with_short_option "$_next" && shift && set -- "-u" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      -v|--version)
        printf '%s %s\n\n%s\n%s\n' "firefox-in-gamemode.sh" "1.1" 'Runs Firefox in a KWin session if started in game mode.' 'Author: Andrew Moore (/u/FineWolf)'
        exit 0
        ;;
      -v*)
        printf '%s %s\n\n%s\n%s\n' "firefox-in-gamemode.sh" "1.1" 'Runs Firefox in a KWin session if started in game mode.' 'Author: Andrew Moore (/u/FineWolf)'
        exit 0
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || { echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2; exit 2; }

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# Set Strict Error Handling
set -euo pipefail

# Main Logic
main() {
  if [ -z "${DISPLAY:-}" ]; then
    echo 'No DISPLAY attached to current session.' >&2
    return 1
  fi

  # If we are not in a GAMESCOPE session, just start Firefox normally
  if [ -z "${GAMESCOPE_WAYLAND_DISPLAY:-}" ]; then
    exec /usr/bin/flatpak run \
      --branch=stable \
      --command=firefox \
      --file-forwarding org.mozilla.firefox

    return $?
  fi

  # Get Display Resolution
  local DISPLAY_RESOLUTION
  DISPLAY_RESOLUTION="$(xdpyinfo | awk '/dimensions/ {print $2}')"

  local WIDTH="${DISPLAY_RESOLUTION%x*}"
  local HEIGHT="${DISPLAY_RESOLUTION#*x}"

  # Create Temp directory to wrapper script
  local TEMP_DIR
  TEMP_DIR="$(mktemp -d)"
  trap 'rm -rf -- "${TEMP_DIR}"' EXIT

  # Write wrapper script for Firefox
  cat <<EOF >"${TEMP_DIR}/firefox_wrapper"
#!/bin/sh
exec /usr/bin/flatpak run \
  --branch=stable \
  --command=firefox \
  --file-forwarding org.mozilla.firefox \
  --width "${WIDTH}" --height "${HEIGHT}"
EOF

  # Mark as executable
  chmod +x "${TEMP_DIR}/firefox_wrapper"

  # Make sure Wayland is enabled for Firefox
  export MOZ_ENABLE_WAYLAND=1

  # Start the window manager, and execute our wrapper
  /usr/bin/kwin_wayland \
    --width "${WIDTH}" --height "${HEIGHT}" \
    --no-lockscreen \
    --exit-with-session "${TEMP_DIR}/firefox_wrapper"
}

self_update() {
  if [ -z "${SELF_UPDATE_ORIGINAL_SCRIPT_PATH:-}" ]; then
    # Copy the script in a temp directory since we are going to replace the old version with a new one,
    # and bash doesn't like it when the script is changed during execution.
    local TEMP_DIR
    TEMP_DIR="$(mktemp -d)"

    SELF_UPDATE_ORIGINAL_SCRIPT_PATH="${BASH_SOURCE[0]}"
    export SELF_UPDATE_ORIGINAL_SCRIPT_PATH

    cp "${SELF_UPDATE_ORIGINAL_SCRIPT_PATH}" "${TEMP_DIR}/update.sh"
    chmod +x "${TEMP_DIR}/update.sh"

    exec "${TEMP_DIR}/update.sh" --update
  else
    # Download the latest version from GitLab, and replace the previous version with the new script
    local UPDATE_URL="https://gitlab.com/finewolf-projects/steamos-helpers/-/raw/master/firefox-in-gamemode/firefox-in-gamemode.sh"
    curl -Ls -o "${SELF_UPDATE_ORIGINAL_SCRIPT_PATH}" "${UPDATE_URL}"

    "${SELF_UPDATE_ORIGINAL_SCRIPT_PATH}" --version
    echo ""
    echo "Update Complete!"

    if [[ "${script_dir}" == /tmp/* ]]; then
      trap 'rm -rf -- "${script_dir}"' EXIT
    fi
  fi
}

if [ "${_arg_update}" == "on" ]; then
  self_update
else
  main
fi
# ] <-- needed because of Argbash
